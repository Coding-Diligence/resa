#!/bin/bash

# Couleurs pour les messages
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Fonction pour afficher les messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Fonction pour installer Maven
install_maven() {
    print_message "Installation de Maven..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        brew install maven
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        sudo apt-get update
        sudo apt-get install maven
    else
        print_error "Système d'exploitation non supporté"
        exit 1
    fi
}

# Vérifier si Maven est installé
if ! command -v mvn &> /dev/null; then
    print_warning "Maven n'est pas installé."
    read -p "Voulez-vous l'installer maintenant ? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        install_maven
    else
        print_error "Maven est requis pour exécuter l'application."
        exit 1
    fi
fi

# Vérifier si Java est installé
if ! command -v java &> /dev/null; then
    print_error "Java n'est pas installé. Veuillez l'installer d'abord."
    exit 1
fi

# Vérifier si Docker est installé
if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas installé. Veuillez l'installer d'abord."
    exit 1
fi

# Fonction pour démarrer l'application
start_app() {
    print_message "Démarrage de l'application..."
    cd back
    mvn spring-boot:run
}

# Fonction pour nettoyer et compiler
clean_build() {
    print_message "Nettoyage et compilation du projet..."
    cd back
    mvn clean install
}

# Fonction pour arrêter l'application
stop_app() {
    print_message "Arrêt de l'application..."
    pkill -f "spring-boot:run"
}

# Fonction pour démarrer la base de données
start_db() {
    print_message "Démarrage de la base de données..."
    cd database
    docker-compose up -d
    cd ..
}

# Fonction pour arrêter la base de données
stop_db() {
    print_message "Arrêt de la base de données..."
    cd database
    docker-compose down
    cd ..
}

# Fonction pour redémarrer la base de données
restart_db() {
    stop_db
    sleep 2
    start_db
}

# Fonction pour voir les logs de la base de données
logs_db() {
    print_message "Affichage des logs de la base de données..."
    cd database
    docker-compose logs -f
    cd ..
}

# Gestion des arguments
case "$1" in
    "start")
        start_app
        ;;
    "stop")
        stop_app
        ;;
    "restart")
        stop_app
        sleep 2
        start_app
        ;;
    "build")
        clean_build
        ;;
    "db:start")
        start_db
        ;;
    "db:stop")
        stop_db
        ;;
    "db:restart")
        restart_db
        ;;
    "db:logs")
        logs_db
        ;;
    *)
        echo "Invalid option: $1"
        echo "Usage: $0 {start|stop|restart|build|db:start|db:stop|db:restart|db:logs}"
        echo "Commands:"
        echo "  start       - Start the application"
        echo "  stop        - Stop the application"
        echo "  restart     - Restart the application"
        echo "  build       - Clean and build the application"
        echo "  db:start    - Start the database"
        echo "  db:stop     - Stop the database"
        echo "  db:restart  - Restart the database"
        echo "  db:logs     - Show database logs"
        exit 1
        ;;
esac 